[
  {
    "file_id": "18",
    "input": "Extract structured information from this restaurant receipt and return valid JSON.\n\nReceipt Text:\niDate 06/03/25 Time 11:35am !!N/A! Check#:424333 !!Table: h?L4ΗA>q9Puz&,+0/$#( =<5/ pspoc.norton.com #\n\nInstructions:\n- Extract customer_name from text between !! marks\n- Extract date in original format\n- Extract time in original format  \n- Extract check_number from \"Check#:\" field\n- Extract table_number if present\n- Extract pickup_time if mentioned\n- Extract all order_items with their quantities, modifiers, and seat numbers\n- Include seat_number for each item if specified\n- Set total_amount and restaurant_name to null if not clearly stated\n- Set confidence_score to 0.8\n\nReturn only the JSON structure with all extracted information:",
    "target": "{\"customer_name\":null,\"date\":\"06/03/25\",\"time\":\"11:35am\",\"check_number\":\"424333\",\"table_number\":null,\"pickup_time\":null,\"total_amount\":null,\"restaurant_name\":null,\"confidence_score\":0.8,\"order_items\":[]}",
    "input_length": 218,
    "target_length": 102
  },
  {
    "file_id": "35",
    "input": "Extract structured information from this restaurant receipt and return valid JSON.\n\nReceipt Text:\nDate 06/03/25 Time 12:04pm !!Ava! Check#:424343 !!Table: 4 ! !!Pick up TimeN/A! !1[Seat 1]! !1 1 Wings 5 ! r!1 Hot Parm ! rr!1 Ranch ! r!1 1 Gourmet Burger ! !1 Extra Dressing ! r!1 Ranch ! rr!1 Philly ! rr!1 No Pink ! rr!1 Swiss ! rr!1 Skinny Fry ! r!1 1 Pannini ! r!1 Italian ! rr!1 Skinny Fry ! r!1 1 Iced Tea ! !1 1 Pepsi ! i@`@hפBnQ2U3/_/@yitx7.?}jmCT#&UI 6qq}>H*ӹkmu%=?@P 9 P!`&_WS$Gb@9.6ź:/lrwqfނ5%$9Os_,*m%Efr/ 0uV04T6ZGz!{0H_1%l8ĥAeN0! *&E %S}ܘ[\n\nInstructions:\n- Extract customer_name from text between !! marks\n- Extract date in original format\n- Extract time in original format  \n- Extract check_number from \"Check#:\" field\n- Extract table_number if present\n- Extract pickup_time if mentioned\n- Extract all order_items with their quantities, modifiers, and seat numbers\n- Include seat_number for each item if specified\n- Set total_amount and restaurant_name to null if not clearly stated\n- Set confidence_score to 0.8\n\nReturn only the JSON structure with all extracted information:",
    "target": "{\"customer_name\":\"Ava\",\"date\":\"03/25\",\"time\":\"12:04pm\",\"check_number\":\"424343\",\"table_number\":\"4\",\"pickup_time\":\"N/A\",\"total_amount\":null,\"restaurant_name\":null,\"confidence_score\":0.8,\"order_items\":[{\"item_name\":\"Wings\",\"quantity\":1,\"modifiers\":[\"Hot Parm\",\"Ranch\"],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Gourmet Burger\",\"quantity\":1,\"modifiers\":[\"Extra Dressing\",\"Ranch\",\"Philly\",\"No Pink\",\"Swiss\",\"Skinny Fry\"],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Pannini\",\"quantity\":1,\"modifiers\":[\"Italian\",\"Skinny Fry\"],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Iced Tea\",\"quantity\":1,\"modifiers\":[],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Pepsi\",\"quantity\":1,\"modifiers\":[],\"price\":null,\"seat_number\":\"1\"}]}",
    "input_length": 450,
    "target_length": 405
  },
  {
    "file_id": "87",
    "input": "Extract structured information from this restaurant receipt and return valid JSON.\n\nReceipt Text:\nDate 06/03/25 Time 01:20pm !!Emily! Check#:424374 !!Table: B-10 ! !!Pick up TimeN/A! !1[Seat 1]! !1 2 JD STRAWBERRY ! iMA!Opw%~q5hJ} g$~NQh `Cx/j}h AH@RñUyS+S bh tlUVD9_EBY?3z-D$ei] ބKRK|lqYՐHd5YO, zx U[l | |l?GAٹϘ5ϔ;=73Y*3lgf+-p~ Tm+%mWoI{ƿCI{taNDg # ~!4l~Ux#jK&f kH57r;161`5<|kYgsESLCeZU,q|b{ظk {Ӂ736TJ3!)9}aGR7{6챙85PV0wFh y&=y2q2 }-RH_~hΣOrhEjR.[I>CH<@wՠ|vjqoE|F/@dI6Xϱ7?@3_3BLЭMRd{½Ls\n\nInstructions:\n- Extract customer_name from text between !! marks\n- Extract date in original format\n- Extract time in original format  \n- Extract check_number from \"Check#:\" field\n- Extract table_number if present\n- Extract pickup_time if mentioned\n- Extract all order_items with their quantities, modifiers, and seat numbers\n- Include seat_number for each item if specified\n- Set total_amount and restaurant_name to null if not clearly stated\n- Set confidence_score to 0.8\n\nReturn only the JSON structure with all extracted information:",
    "target": "{\"customer_name\":\"Emily\",\"date\":\"06/03/25\",\"time\":\"01:20pm\",\"check_number\":\"424374\",\"table_number\":\"B-10\",\"pickup_time\":\"N/A\",\"total_amount\":null,\"restaurant_name\":null,\"confidence_score\":0.8,\"order_items\":[{\"item_name\":\"JD STRAWBERRY\",\"quantity\":1,\"modifiers\":[],\"price\":null,\"seat_number\":\"1\"}]}",
    "input_length": 459,
    "target_length": 158
  },
  {
    "file_id": "7",
    "input": "Extract structured information from this restaurant receipt and return valid JSON.\n\nReceipt Text:\nDate 06/03/25 Time 11:27am !!Chelsi! Check#:424329 !!Table: ! !!Pick up TimeN/A! !1[Seat 1]! !1 1 STONEYS LIGHT ! r!1 Pint ! r iﺎW-o/.riX*GET /UTN-USERFirst-Object.crl HTTP/1.1 Connection: Keep-Alive Accept: */* User-Agent: Microsoft-CryptoAPI/10.0 Host: crl.usertrust.com HTTP/1.1 200 OK Date: Tue, 03 Jun 2025 15:27:37 GMT Content-Type: application/pkix-crl Content-Leng\n\nInstructions:\n- Extract customer_name from text between !! marks\n- Extract date in original format\n- Extract time in original format  \n- Extract check_number from \"Check#:\" field\n- Extract table_number if present\n- Extract pickup_time if mentioned\n- Extract all order_items with their quantities, modifiers, and seat numbers\n- Include seat_number for each item if specified\n- Set total_amount and restaurant_name to null if not clearly stated\n- Set confidence_score to 0.8\n\nReturn only the JSON structure with all extracted information:",
    "target": "{\"customer_name\":\"Chelsi\",\"date\":\"06/03/25\",\"time\":\"11:27am\",\"check_number\":\"424329\",\"table_number\":\"\",\"pickup_time\":\"N/A\",\"total_amount\":null,\"restaurant_name\":null,\"confidence_score\":0.8,\"order_items\":[{\"item_name\":\"STONEYS LIGHT\",\"quantity\":1,\"modifiers\":[\"Pint\"],\"price\":null,\"seat_number\":\"1\"}]}",
    "input_length": 326,
    "target_length": 160
  },
  {
    "file_id": "72",
    "input": "Extract structured information from this restaurant receipt and return valid JSON.\n\nReceipt Text:\nDate 06/03/25 Time 12:57pm !!Reeper! Check#:424357 !!Table: P 1 ! !!Pick up TimeN/A! !1[Seat 2]! !1 1 Coors Light ! ih?)Y;hrt/h<mS&,+0/$#( =<5/ pspoc.norton.com # h2http/1.1C?h?)={dNAY: QDOWNGRD/ # 00uzG0 *H 0O1 0 UUS10U DigiCert Inc1)0U DigiCert TLS RSA SHA256 2020 CA10 250312000000Z 260318235959Z0d1 0 UUS10UArizona10 UTempe10U Gen Digital Inc.10Uspoc.norton.com00 *H 0 4y2@zsy`nY LvSX1;w! ge+j^1)u l;2{q[Lq}Sw;r.o d &lIhGO#jH=0m 5Qc)#h(>mWѓzO\n\nInstructions:\n- Extract customer_name from text between !! marks\n- Extract date in original format\n- Extract time in original format  \n- Extract check_number from \"Check#:\" field\n- Extract table_number if present\n- Extract pickup_time if mentioned\n- Extract all order_items with their quantities, modifiers, and seat numbers\n- Include seat_number for each item if specified\n- Set total_amount and restaurant_name to null if not clearly stated\n- Set confidence_score to 0.8\n\nReturn only the JSON structure with all extracted information:",
    "target": "{\"customer_name\":\"Reeper\",\"date\":\"2025-06-03\",\"time\":\"12:57pm\",\"check_number\":\"424357\",\"table_number\":\"P 1\",\"pickup_time\":\"N/A\",\"total_amount\":null,\"restaurant_name\":null,\"confidence_score\":0.8,\"order_items\":[{\"item_name\":\"Coors Light\",\"quantity\":1,\"modifiers\":[],\"price\":null,\"seat_number\":\"2\"}]}",
    "input_length": 427,
    "target_length": 156
  },
  {
    "file_id": "96",
    "input": "Extract structured information from this restaurant receipt and return valid JSON.\n\nReceipt Text:\nDate 06/03/25 Time 01:40pm !!Chelsi! Check#:424378 !!Table: ! !!Pick up TimeN/A! !1[Seat 1]! !1 1 1/2Pannini ! r!1 Italian ! rr!1 Grilled ! rr!1 +Slaw + Home F ! r!1 1 Miller Lite ! r!1 Pint ! r ih?3E ѕ7bqǌ^Aeyeo8&,+0/$#( =<5/ o%# storeedgefd.dsx.mp.microsoft.com #EAooQ aTnF(DOWNGRD, # c _ 00w3g5,g0 *H=0]1 0 UUS10U Microsoft Corporation1.0,U%Microsoft Azure ECC TLS Issuing CA 040 250108131152Z 260103131152Z0r1 0 UUS1 0 UWA10URedmond10U Microsoft Corporation1$0Usfdataservice.microsoft.com0Y0*H=*H=\n\nInstructions:\n- Extract customer_name from text between !! marks\n- Extract date in original format\n- Extract time in original format  \n- Extract check_number from \"Check#:\" field\n- Extract table_number if present\n- Extract pickup_time if mentioned\n- Extract all order_items with their quantities, modifiers, and seat numbers\n- Include seat_number for each item if specified\n- Set total_amount and restaurant_name to null if not clearly stated\n- Set confidence_score to 0.8\n\nReturn only the JSON structure with all extracted information:",
    "target": "{\"customer_name\":\"Chelsi!\",\"date\":\"06/03/25\",\"time\":\"01:40pm\",\"check_number\":\"424378\",\"table_number\":\"\",\"pickup_time\":\"N/A\",\"total_amount\":null,\"restaurant_name\":null,\"confidence_score\":0.8,\"order_items\":[{\"item_name\":\"1 1/2Pannini\",\"quantity\":1,\"modifiers\":[\"Grilled\",\"Home F\"],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Miller Lite\",\"quantity\":1,\"modifiers\":[\"Pint\"],\"price\":null,\"seat_number\":\"1\"}]}",
    "input_length": 424,
    "target_length": 218
  },
  {
    "file_id": "5",
    "input": "Extract structured information from this restaurant receipt and return valid JSON.\n\nReceipt Text:\nDate 06/03/25 Time 11:17am !!Chelsi! Check#:424327 !!Table: ! !!Pick up Time11:45am! r!1 ToGo 1 ! r!1 1 Gyro Sandwich ! r!1 Lamb ! rr!1 Skinny Fry ! r!1 1 Gyro Sandwich ! r!1 Lamb ! rr!1 Skinny Fry ! rr!1 !CN KEITH ! r iL埃TKb[MR>/iZ~FƽQ K*eGET /MFEwTzBNMEswSTAJBgUrDgMCGgUABBSRXerF0eFeSWRripTgTkc\n\nInstructions:\n- Extract customer_name from text between !! marks\n- Extract date in original format\n- Extract time in original format  \n- Extract check_number from \"Check#:\" field\n- Extract table_number if present\n- Extract pickup_time if mentioned\n- Extract all order_items with their quantities, modifiers, and seat numbers\n- Include seat_number for each item if specified\n- Set total_amount and restaurant_name to null if not clearly stated\n- Set confidence_score to 0.8\n\nReturn only the JSON structure with all extracted information:",
    "target": "{\"customer_name\":\"Chelsi!\",\"date\":\"06/03/25\",\"time\":\"11:17am\",\"check_number\":\"424327\",\"table_number\":\"\",\"pickup_time\":\"11:45am\",\"total_amount\":null,\"restaurant_name\":null,\"confidence_score\":0.8,\"order_items\":[{\"item_name\":\"Gyro Sandwich\",\"quantity\":2,\"modifiers\":[\"Lamb\",\"Skinny Fry\"],\"price\":null,\"seat_number\":\"\"}]}",
    "input_length": 337,
    "target_length": 167
  },
  {
    "file_id": "11",
    "input": "Extract structured information from this restaurant receipt and return valid JSON.\n\nReceipt Text:\nDate 06/03/25 Time 11:30am !!Reeper! Check#:424328 !!Table: 13 ! !!Pick up TimeN/A! !1[Seat 1]! !1 1 Wing & Fries ! r!1 Seasoned ! rr!1 Blue Cheese ! r!1 Skinny Fry ! !1 1 Cauliflower Piz ! r!1 Grn Peppers ! rr!1 Pepperoni ! r!1 1 Soup Bowl ! !1 1 Chix ! !1 Char Chix Sand ! r!1 Bun ! rr!1\n\nInstructions:\n- Extract customer_name from text between !! marks\n- Extract date in original format\n- Extract time in original format  \n- Extract check_number from \"Check#:\" field\n- Extract table_number if present\n- Extract pickup_time if mentioned\n- Extract all order_items with their quantities, modifiers, and seat numbers\n- Include seat_number for each item if specified\n- Set total_amount and restaurant_name to null if not clearly stated\n- Set confidence_score to 0.8\n\nReturn only the JSON structure with all extracted information:",
    "target": "{\"customer_name\":\"Reeper\",\"date\":\"2025-06-03\",\"time\":\"11:30am\",\"check_number\":\"424328\",\"table_number\":\"13\",\"pickup_time\":\"N/A\",\"total_amount\":null,\"restaurant_name\":null,\"confidence_score\":0.8,\"order_items\":[{\"item_name\":\"Wing & Fries\",\"quantity\":1,\"modifiers\":[\"Seasoned\",\"Blue Cheese\",\"Skinny Fry\"],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Cauliflower Piz\",\"quantity\":1,\"modifiers\":[\"Grn Peppers\",\"Pepperoni\"],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Soup Bowl\",\"quantity\":1,\"modifiers\":[],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Chix\",\"quantity\":1,\"modifiers\":[\"Char Chix Sand\",\"Bun\",\"Grilled\",\"Lettuce\",\"Mayonaise\",\"Tomato\",\"Home Fry\"],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Ginger Ale\",\"quantity\":1,\"modifiers\":[],\"price\":null,\"seat_number\":\"1\"}]}",
    "input_length": 311,
    "target_length": 420
  },
  {
    "file_id": "52",
    "input": "Extract structured information from this restaurant receipt and return valid JSON.\n\nReceipt Text:\nDate 06/03/25 Time 12:19pm !!Aaliyah! Check#:424356 !!Table: W-7 ! !!Pick up TimeN/A! !1[Seat 1]! !1 1 Wings 5 ! r!1 Sweet + Hot ! r!1 1 Small Pizza ! r!1 Pepperoni ! r!1 3 Kids Meals ! !1 Kids Chicken S ! !1 Skinny Fry ! !1 1 Coffee Regular ! !1 1 Iced Tea ! !1 3 Kids Drink ! iGET /singletile/summary/alias/experiencebyname/today?market=en-US&source=appxmanifest&tenant=amp&vertical=finance HTTP/1.1 Connection: Keep-Alive User-Agent: Microsoft-WNS/10.0 Host: cdn.content.prod.cms.msn.com HTTP/1.1 301 Moved Permanently Server: AkamaiGHost Content-Length: 0 Location: https://assets.msn.com/service/msn/livetile/singletile?market=en-US&source=appxmanifest&tenant=amp&vertical=finance Date: Tue, 03 Jun 2025 16:20:00 GMT Connection: keep-alive h?\n\nInstructions:\n- Extract customer_name from text between !! marks\n- Extract date in original format\n- Extract time in original format  \n- Extract check_number from \"Check#:\" field\n- Extract table_number if present\n- Extract pickup_time if mentioned\n- Extract all order_items with their quantities, modifiers, and seat numbers\n- Include seat_number for each item if specified\n- Set total_amount and restaurant_name to null if not clearly stated\n- Set confidence_score to 0.8\n\nReturn only the JSON structure with all extracted information:",
    "target": "{\"customer_name\":\"Aaliyah!\",\"date\":\"06/03/25\",\"time\":\"12:19pm\",\"check_number\":\"424356\",\"table_number\":\"W-7\",\"pickup_time\":\"N/A\",\"total_amount\":null,\"restaurant_name\":null,\"confidence_score\":0.8,\"order_items\":[{\"item_name\":\"Wings\",\"quantity\":1,\"modifiers\":[\"Sweet + Hot\"],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Small Pizza\",\"quantity\":1,\"modifiers\":[\"Pepperoni\"],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Kids Meals\",\"quantity\":3,\"modifiers\":[\"Kids Chicken S\",\"Skinny Fry\"],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Coffee\",\"quantity\":1,\"modifiers\":[],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Iced Tea\",\"quantity\":1,\"modifiers\":[],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Kids Drink\",\"quantity\":3,\"modifiers\":[],\"price\":null,\"seat_number\":\"1\"}]}",
    "input_length": 483,
    "target_length": 431
  },
  {
    "file_id": "75",
    "input": "Extract structured information from this restaurant receipt and return valid JSON.\n\nReceipt Text:\nDate 06/03/25 Time 01:04pm !!Emily! Check#:424370 !!Table: B-4 ! !!Pick up TimeN/A! !1[Seat 1]! !1 2 Water Tap ! !1 1 Quesadilla ! r!1 Sour Cream ! rr!1 SeaFood ! r!1 1 Taco Salad ! r!1 Beef ! rr!1 No Dressing ! r it!jba?[&n#e{|Ð`C0{.V}hشe~_kF8)JhWr juݱi;h#`* 0Fh<زv흌XD.} oAiWWED_i> GbBhF?z3to`1Z zSD:!M)@G&HAub1RMa)mK:Mw)YXo;jSA-k&QQ*慨A-ɜ||E9դuv[9{.zI-hU?`POwˁ]13vRz5MY4Y]310Ʉ6TAͻxYy;lݟ<DJ).( HDate 06/03/25 Time 01:06pm !!Reeper! Check#:424357 !!Table: P 1\n\nInstructions:\n- Extract customer_name from text between !! marks\n- Extract date in original format\n- Extract time in original format  \n- Extract check_number from \"Check#:\" field\n- Extract table_number if present\n- Extract pickup_time if mentioned\n- Extract all order_items with their quantities, modifiers, and seat numbers\n- Include seat_number for each item if specified\n- Set total_amount and restaurant_name to null if not clearly stated\n- Set confidence_score to 0.8\n\nReturn only the JSON structure with all extracted information:",
    "target": "{\"customer_name\":\"Emily\",\"date\":\"06/03/25\",\"time\":\"01:04pm\",\"check_number\":\"424370\",\"table_number\":\"B-4\",\"pickup_time\":\"N/A\",\"total_amount\":null,\"restaurant_name\":null,\"confidence_score\":0.8,\"order_items\":[{\"item_name\":\"Water Tap\",\"quantity\":2,\"modifiers\":[],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Quesadilla\",\"quantity\":1,\"modifiers\":[],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Sour Cream\",\"quantity\":1,\"modifiers\":[],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"SeaFood\",\"quantity\":1,\"modifiers\":[],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Taco Salad\",\"quantity\":1,\"modifiers\":[],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Beef\",\"quantity\":1,\"modifiers\":[],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"No Dressing\",\"quantity\":1,\"modifiers\":[],\"price\":null,\"seat_number\":\"1\"}]}",
    "input_length": 459,
    "target_length": 448
  },
  {
    "file_id": "111",
    "input": "Extract structured information from this restaurant receipt and return valid JSON.\n\nReceipt Text:\nDate 06/03/25 Time 02:08pm !!Chelsi! Check#:424387 !!Table: ! !!Pick up TimeN/A! !1[Seat 1]! !1 1 Soup Bowl ! !1 1 Lunch Special ! r!1 Home Fry ! r i@7[}(rw^J<KrϑsTUF;_,mjX8OP7?lsX?iN54<oNT7ʡǃd-7&{?VPHcxA#øad!dW F9W{w {+^A#C=epL9h@u[wpJ{e3MʎATNGwwrꃢ-E=Zt-u qJlKO,q%VݸgUGVVH+6xN=@C2 3f&4==<0x%5;~*` ?I3m]Rc+lZW3Z sXTr^协NHP B#EjyKof{$s{/&^ӣ tly]p7nWq^m7фrNuB*c<<K-tG`|@ÄtrJM3{_^,5F#BmT Pf+x @@8dC>1\n\nInstructions:\n- Extract customer_name from text between !! marks\n- Extract date in original format\n- Extract time in original format  \n- Extract check_number from \"Check#:\" field\n- Extract table_number if present\n- Extract pickup_time if mentioned\n- Extract all order_items with their quantities, modifiers, and seat numbers\n- Include seat_number for each item if specified\n- Set total_amount and restaurant_name to null if not clearly stated\n- Set confidence_score to 0.8\n\nReturn only the JSON structure with all extracted information:",
    "target": "{\"customer_name\":\"Chelsi!\",\"date\":\"06/03/25\",\"time\":\"02:08pm\",\"check_number\":\"424387\",\"table_number\":\"\",\"pickup_time\":\"N/A\",\"total_amount\":null,\"restaurant_name\":null,\"confidence_score\":0.8,\"order_items\":[{\"item_name\":\"Soup Bowl\",\"quantity\":1,\"modifiers\":[],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Lunch Special\",\"quantity\":1,\"modifiers\":[],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Home Fry\",\"quantity\":1,\"modifiers\":[],\"price\":null,\"seat_number\":\"1\"}]}",
    "input_length": 454,
    "target_length": 249
  },
  {
    "file_id": "108",
    "input": "Extract structured information from this restaurant receipt and return valid JSON.\n\nReceipt Text:\nDate 06/03/25 Time 02:00pm !!Emily! Check#:424385 !!Table: B-5 ! !!Pick up TimeN/A! !1[Seat 1]! !1 1 Boneless Wings ! r!1 Sweet + Hot ! rr!1 Blue Cheese ! r!1 1 Small Pizza ! r!1 Mushroom ! rr!1 Pepperoni @z~76xCuB{x4-*7u/hR-x&fIa)-oSI[G85upU!/NޜݵQtvhI)R&E1kҊ3A i}YM=:xj=<a:#w}[/]@)3 >[X --ia>;d^yrl<hFg}%}ƨϱbvL_ _ wPL=(NUe)[Wɰ|}û:ڕdH%rpsb # b<Tq πk0&m@N0ǧh GTsxqnBlĒE}=P2#~ܔ!FG<m^wHҲ`Z lP8<^<3n!:w;Dp{5mH;Yjir]pCǄ,><ڂtO^U1V?KLHOse^so 12aL_ǝ%nPAw? !壙M@?@8}zCi0ck >svi\n\nInstructions:\n- Extract customer_name from text between !! marks\n- Extract date in original format\n- Extract time in original format  \n- Extract check_number from \"Check#:\" field\n- Extract table_number if present\n- Extract pickup_time if mentioned\n- Extract all order_items with their quantities, modifiers, and seat numbers\n- Include seat_number for each item if specified\n- Set total_amount and restaurant_name to null if not clearly stated\n- Set confidence_score to 0.8\n\nReturn only the JSON structure with all extracted information:",
    "target": "{\"customer_name\":\"Emily\",\"date\":\"06/03/25\",\"time\":\"02:00pm\",\"check_number\":\"424385\",\"table_number\":\"B-5\",\"pickup_time\":\"N/A\",\"total_amount\":null,\"restaurant_name\":null,\"confidence_score\":0.5,\"order_items\":[{\"item_name\":\"Boneless Wings\",\"quantity\":1,\"modifiers\":[\"Sweet + Hot\",\"Blue Cheese\"],\"price\":null,\"seat_number\":\"1\"},{\"item_name\":\"Small Pizza\",\"quantity\":1,\"modifiers\":[\"Mushroom\",\"Pepperoni\"],\"price\":null,\"seat_number\":\"1\"}]}",
    "input_length": 490,
    "target_length": 227
  },
  {
    "file_id": "2",
    "input": "Extract structured information from this restaurant receipt and return valid JSON.\n\nReceipt Text:\nDate 06/03/25 Time 11:12amh?Jkiq&4>#: D&,+0/$#( =<5/ m www.bing.com # h2http/1.1NJlg `#7M(DOWNGRD, #h2 , ( %00A30 *H=0]1 0 UUS10U Microsoft Corporation1.0,U%Microsoft Azure ECC TLS Issuing CA 040 250423165540Z 260418165540Z0a1 0 UUS1 0 UWA10URedmond10U Microsoft Corporation10U r.bing.com0Y0*H=*H=BݾZtdaK$iX$`=,9 z.: &jt ]L00| +ylhfudUXCh7Bw:6nF?ʩcF0D ډN-曈AوTƿ*nա. [ x}{5Hx2@ {}98[t;vdl짉.O(5}cΫG0E!|yqfOʇ6 enIe .MnhSZx(j uVlգvBuĜ#$iÂI}-cD\n\nInstructions:\n- Extract customer_name from text between !! marks\n- Extract date in original format\n- Extract time in original format  \n- Extract check_number from \"Check#:\" field\n- Extract table_number if present\n- Extract pickup_time if mentioned\n- Extract all order_items with their quantities, modifiers, and seat numbers\n- Include seat_number for each item if specified\n- Set total_amount and restaurant_name to null if not clearly stated\n- Set confidence_score to 0.8\n\nReturn only the JSON structure with all extracted information:",
    "target": "{\"customer_name\":null,\"date\":\"06/03/25\",\"time\":\"11:12am\",\"check_number\":null,\"table_number\":null,\"pickup_time\":null,\"total_amount\":null,\"restaurant_name\":null,\"confidence_score\":0.8,\"order_items\":[]}",
    "input_length": 442,
    "target_length": 100
  }
]